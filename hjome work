Инструкция по работе с Markdown		
		
		
		# Что такое git
		* Git это система контроля версий
		
		
		# Подготовка Репозитория
		* Подпись пользователя:
		* git config user.name
		* git config user.email"email@m.com"
		* git config --local
		
		# Еще нескоторые команды для работы с Репозиториями:
		* __git pull__
		- Загружает историю из удаленного Репозитория и объеденяет ее с локальной. Примечание: __pull = fetch + merge__
		
		* __git push  [удалённый репозиторий] [ветка]__
		- Загружает все изменения локальной ветки в удаленный репозиторий.
		
		
		# Создание сохранений
		__Сюда мы допишем некоторые фрады, дабы вызвать КОНФЛИК ПРИ СЛИЯНИИ ВЕТОК saves & master__
		
		+ __git commit__ - фиксирует (сохраняет) нас на любых этапах работ с файлом.  __git commit__ всегда пишется с комментарием. Например , __git commit -m "комментарий к сохранению"__
		
		+ __-A, --all__   Данная команда обозначает __*добавь изменения из всех отслеживаемых и неотслеживаемых файлов*__
		к ней же относиться;
		__git commit -a -m "комментарий к комиту"__
		
		
		# Перемещение между сохранениями
		* git checkout commit -
		__это перемещение между комитами__
		* git checkout master - __перемещение между ветками__
		* git checkout - Это команда перемещения
		
		
		# Состояния Репозитория
		*Сравнение изменений*
		* git diff
		
		*Журнал изменений*
		* git log
		
		
		# Журнал изменений
		+ __git log__
		-Просмотр и изучение истории изменений файлов проекта
		
		+ __git log --follow [файл]__
		-История коммитов для текущей ветки.
		
		+ __git diff [первая ветка]...[вторая ветка]__
		-Показывает разницу между содержанием коммитов двух веток
		
		+ __git show [коммит]__
		-Выводит информацию и показывает изменения в выбранном коммите.
		
		
		# Ветки в git
		создание новой ветки
		* git branc_name
		
		Вывести список веток
		* git branch
		
		Переход к нужной ветке
		* git checkout branch_name
		
		
		# Слияние веток и решение конфлиутов1
		* команда для слияния*
		* git merge имя_ветки
		__*ВАЖНО*__ Необходимо находиться в ветке масте при слиянии ее ответвлений!!!
		
		
		* *в случае , если  __git merge__ вызовит конфликт, то в ручную нужно поработать и править инфу.*
		
		
		# Удаление веток
		*Коиманда удаления ветки*
		* git branch -d branch_name
		
		# Справка
		
		
		
		
		
		
		
		
		## Команды git и их обозначения
		
		+ __git init__ - начало работы. Инициализирует репозиторий в папке. (проще говоря начинает отслеживать папку)
		
		+ __git add__  - добавляет файл в индекс git. Другими словами выбирает\добавляет файл в *ОТСЛЕЖИВАЕМЫЙ*.
		
		
		
		+ __git commit__ - фиксирует (сохраняет) нас на любых этапах работ с файлом.  __git commit__ всегда пишется с комментарием. Например , __git commit -m "комментарий к сохранению"__
		
		
		
		+ __git diff__ - показывает изменения в файле по сравнению с посследней сохраненной версией.
		
		
		+ __git checkout__ - помогает перемещаться нам по нашим веткам, от файла к файлу, от коммита к комиту. Единственное нам нужно: __git checkout master__ -для перемещения по веткам, __git checkout h52g(4первых элемента комита)__ -для перемещения между *коммитами(сохранениями)*
		
		
		+ __git log__ - показывает нам весь журнал событий в git-е *(иными словами __ЖУРНАЛ ВЕРСИЙ__)*
		
		
		+ __git branch__ - позволяет нам проверить на какой ветке мы сейчас находимся.
		
		+ __git branch (имя новой ветки)__  -позволяет нам создать *НОВУЮ ВЕТКУ* __работы над файлом__
		
		
		
		
		
		
		## Выделение текста
		
		* Чтобы выделить текст Курсивом нужно обрамить(или) вылелить его (*) звездочками или (_) Нижним подчеркиванием. Вот так: *Курсив*
		или _вот так_
		
		* Чтобы выделить тект полужирным, надо выделить его (**) звездочками или двойным подчеркивание (__) Вот так: **Полужирный** или __вот так__
		
		Альтернативные способы ввыделения полужирным и курсивом нужны для того чтоб совместить эти 2 способа в одном предложении. Например
		__*Выделяя предложение либо слово курсивом+полужирным.*__
		
		## Списки
		
		
		## Работа с Изображениями
		
		
		## Ссылки
		
		## Работа с Таблицами
		
		## Цитаты
		
		## Заключение